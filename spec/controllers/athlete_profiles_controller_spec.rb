require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe AthleteProfilesController, type: :controller do
  include Devise::Test::ControllerHelpers

  before do
    @devan = FactoryGirl.create(:devan)
    sign_in @devan
  end

  # This should return the minimal set of attributes required to create a valid
  # AthleteProfile. As you add validations to AthleteProfile, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
        first_name: "Devan",
        last_name: "Moylan",
        gender: "male",
        first_language: "English",
        birthday: Date.today,
        height_feet: 6,
        height_inches: 1,
        weight: 175,
        primary_citizenship: "United States",
        user_id: @devan.id
    }
  }

  let(:invalid_attributes) {
    {
        first_name: nil,
        last_name: nil,
        gender: nil,
        first_language: nil,
        birthday: nil,
        height_feet: nil,
        height_inches: nil,
        weight: nil,
        primary_citizenship: nil
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # StudentProfilesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #show" do
    it "assigns the requested athlete_profile as @athlete_profile" do
      athlete_profile = FactoryGirl.create(:athlete_profile, user: @devan)
      get :show, {:id => athlete_profile.to_param}
      expect(assigns(:athlete_profile)).to eq(athlete_profile)
    end
  end


  describe "GET #new" do
    context "when a user doesn't have an athlete profile" do
      it "assigns a new athlete_profile as @athlete_profile" do
        get :new
        expect(assigns(:athlete_profile)).to be_a_new(AthleteProfile)
      end
    end

    context "when a user already has an athlete profile" do
      before do
        @athlete_profile = FactoryGirl.create(:athlete_profile, user: @devan)
        get :new
      end

      it "redirects to the AthleteProfile show page" do
        expect(response).to redirect_to(@athlete_profile)
      end
    end
  end

  describe "GET #edit" do
    it "assigns the requested athlete_profile as @athlete_profile" do
      athlete_profile = AthleteProfile.create! valid_attributes
      get :edit, {:id => athlete_profile.to_param}
      expect(assigns(:athlete_profile)).to eq(athlete_profile)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new athlete profile" do
        expect {
          post :create, {:athlete_profile => valid_attributes}
        }.to change(AthleteProfile, :count).by(1)
      end

      it "assigns a nearly created athlete profile as @athlete_profile" do
        post :create, {:athlete_profile => valid_attributes}
        expect(assigns(:athlete_profile)).to be_a(AthleteProfile)
        expect(assigns(:athlete_profile)).to be_persisted
      end

      it "redirects to the created athlete profile" do
        post :create, {:athlete_profile => valid_attributes}
        expect(response).to redirect_to(AthleteProfile.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved athlete profile as @athlete_profile" do
        post :create, {:athlete_profile => invalid_attributes}
        expect(assigns(:athlete_profile)).to be_a_new(AthleteProfile)
      end

      it "re-renders the 'new' template" do
        post :create, {:athlete_profile => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {
            first_name: "Devan",
            last_name: "Moylan",
            gender: "male",
            first_language: "English",
            birthday: Date.today,
            height_feet: 6,
            height_inches: 1,
            weight: 195,
            primary_citizenship: "United States",
            user_id: @devan.to_param
        }
      }

      it "updates the requested athlete_profile" do
        athlete_profile = AthleteProfile.create! valid_attributes
        put :update, {:id => athlete_profile.to_param, :athlete_profile => new_attributes}, valid_session
        athlete_profile.reload
        expect(athlete_profile.weight).to eq(195)

      end

      it "assigns the requested athlete profile as @athlete_profile" do
        athlete_profile = AthleteProfile.create! valid_attributes
        put :update, {:id => athlete_profile.to_param, :athlete_profile => new_attributes}, valid_session
        expect(assigns(:athlete_profile)).to eq(athlete_profile)
      end

      it "redirects to the athlete profile" do
        athlete_profile = AthleteProfile.create! valid_attributes
        put :update, {:id => athlete_profile.to_param, :athlete_profile => new_attributes}, valid_session
        expect(response).to redirect_to(athlete_profile)
      end
    end

    context "with invalid params" do
      it "assigns the athlete_profile as @athlete_profile" do
        athlete_profile = AthleteProfile.create! valid_attributes
        put :update, {:id => athlete_profile.to_param, :athlete_profile => invalid_attributes}, valid_session
        expect(assigns(:athlete_profile)).to eq(athlete_profile)
      end

      it "re-renders the 'edit' template" do
        athlete_profile = AthleteProfile.create! valid_attributes
        put :update, {:id => athlete_profile.to_param, :athlete_profile => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested athlete_profile" do
      athlete_profile = AthleteProfile.create! valid_attributes
      expect {
        delete :destroy, {:id => athlete_profile.to_param}
      }.to change(AthleteProfile, :count).by(-1)
    end

    it "redirects to the teams list page" do
      athlete_profile = AthleteProfile.create! valid_attributes
      delete :destroy, {:id => athlete_profile.to_param}
      expect(response).to redirect_to(root_path)
    end
  end

  context "another athlete's profile" do
    before do
      other_athlete = FactoryGirl.create(:user)
      @athlete_profile = FactoryGirl.create(:athlete_profile, user: other_athlete)
    end

    describe "GET #show" do
      it "assigns the requested athlete_profile as @athlete_profile" do
        get :show, {:id => @athlete_profile.to_param}
        expect(assigns(:athlete_profile)).to eq(@athlete_profile)
      end
    end

    describe "GET #edit" do
      it "redirects to the root path" do
        get :edit, {:id => @athlete_profile.to_param}
        expect(response).to redirect_to(root_path)
      end
    end

    describe "PUT #update" do
      it "redirects to the root path" do
        get :update, {:id => @athlete_profile.to_param, :athlete_profile => {graduation_year: "2010"}}
        expect(response).to redirect_to(root_path)
      end
    end

    describe "DELETE #destroy" do
      it "doesn't delete the athlete profile" do
        expect {
          delete :destroy, {:id => @athlete_profile.to_param}
        }.not_to change(AthleteProfile, :count)
      end

      it "redirects to the root path" do
        delete :destroy, {:id => @athlete_profile.to_param}
        expect(response).to redirect_to(root_path)
      end
    end
  end


end